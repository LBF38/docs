"use strict";(self.webpackChunk_logto_docs=self.webpackChunk_logto_docs||[]).push([[8423],{40895:function(e,n,i){i.r(n),i.d(n,{assets:function(){return l},contentTitle:function(){return o},default:function(){return a},frontMatter:function(){return r},metadata:function(){return c},toc:function(){return d}});var s=i(11527),t=i(17279);const r={},o="LogtoClient",c={id:"sdk/Swift/LogtoClient/Classes/LogtoClient",title:"LogtoClient",description:"CLASS",source:"@site/versioned_docs/version-1.x/sdk/Swift/LogtoClient/Classes/LogtoClient.md",sourceDirName:"sdk/Swift/LogtoClient/Classes",slug:"/sdk/Swift/LogtoClient/Classes/LogtoClient",permalink:"/sdk/Swift/LogtoClient/Classes/LogtoClient",draft:!1,unlisted:!1,editUrl:"https://github.com/logto-io/docs/tree/master/versioned_docs/version-1.x/sdk/Swift/LogtoClient/Classes/LogtoClient.md",tags:[],version:"1.x",frontMatter:{},sidebar:"sdkSidebar",previous:{title:"LogtoClient Module",permalink:"/sdk/Swift/LogtoClient/"},next:{title:"AccessToken",permalink:"/sdk/Swift/LogtoClient/Structs/AccessToken"}},l={},d=[{value:"Structs",id:"structs",level:2},{value:"NotificationObject",id:"notificationobject",level:3},{value:"Properties",id:"properties",level:2},{value:"<code>HandleNotification</code>",id:"handlenotification",level:3},{value:"<code>idToken</code>",id:"idtoken",level:3},{value:"<code>refreshToken</code>",id:"refreshtoken",level:3},{value:"<code>oidcConfig</code>",id:"oidcconfig",level:3},{value:"<code>isAuthenticated</code>",id:"isauthenticated",level:3},{value:"Methods",id:"methods",level:2},{value:"<code>handle(forAppId:url:)</code>",id:"handleforappidurl",level:3},{value:"Parameters",id:"parameters",level:4},{value:"<code>init(useConfig:socialPlugins:session:)</code>",id:"inituseconfigsocialpluginssession",level:3},{value:"<code>signInWithBrowser(redirectUri:)</code>",id:"signinwithbrowserredirecturi",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"<code>signOut()</code>",id:"signout",level:3},{value:"<code>getAccessToken(for:)</code>",id:"getaccesstokenfor",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"<code>fetchUserInfo()</code>",id:"fetchuserinfo",level:3},{value:"<code>getIdTokenClaims()</code>",id:"getidtokenclaims",level:3},{value:"<code>handle(url:)</code>",id:"handleurl",level:3}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"CLASS"})}),"\n",(0,s.jsx)(n.h1,{id:"logtoclient",children:(0,s.jsx)(n.code,{children:"LogtoClient"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-swift",children:"public class LogtoClient\n"})}),"\n",(0,s.jsx)(n.h2,{id:"structs",children:"Structs"}),"\n",(0,s.jsx)(n.h3,{id:"notificationobject",children:(0,s.jsx)(n.a,{href:"/sdk/Swift/LogtoClient/Structs/LogtoClient.NotificationObject",children:"NotificationObject"})}),"\n",(0,s.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsx)(n.h3,{id:"handlenotification",children:(0,s.jsx)(n.code,{children:"HandleNotification"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-swift",children:'public static let HandleNotification = Notification.Name("Logto Handle")\n'})}),"\n",(0,s.jsx)(n.p,{children:"The notification name for LogtoClient to handle."}),"\n",(0,s.jsx)(n.h3,{id:"idtoken",children:(0,s.jsx)(n.code,{children:"idToken"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-swift",children:"public internal(set) var idToken: String?\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The cached ID Token in raw string.\nUse ",(0,s.jsx)(n.code,{children:".getIdTokenClaims()"})," to retrieve structured data."]}),"\n",(0,s.jsx)(n.h3,{id:"refreshtoken",children:(0,s.jsx)(n.code,{children:"refreshToken"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-swift",children:"public internal(set) var refreshToken: String?\n"})}),"\n",(0,s.jsx)(n.p,{children:"The cached Refresh Token."}),"\n",(0,s.jsx)(n.h3,{id:"oidcconfig",children:(0,s.jsx)(n.code,{children:"oidcConfig"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-swift",children:"public internal(set) var oidcConfig: LogtoCore.OidcConfigResponse?\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The config fetched from ",(0,s.jsx)(n.a,{href:"https://openid.net/specs/openid-connect-discovery-1_0.html",children:"OIDC Discovery"})," endpoint."]}),"\n",(0,s.jsx)(n.h3,{id:"isauthenticated",children:(0,s.jsx)(n.code,{children:"isAuthenticated"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-swift",children:"public var isAuthenticated: Bool\n"})}),"\n",(0,s.jsx)(n.p,{children:"Whether the user has been authenticated."}),"\n",(0,s.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(n.h3,{id:"handleforappidurl",children:(0,s.jsx)(n.code,{children:"handle(forAppId:url:)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-swift",children:"public static func handle(forAppId appId: String? = nil, url: URL)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Post a notification that tells Logto clients to handle the given URL."}),"\n",(0,s.jsxs)(n.p,{children:["Usually this function need to be called in ",(0,s.jsx)(n.code,{children:"onOpenURL(perform:)"})," in SwiftUI or ",(0,s.jsx)(n.code,{children:"application(_:open:options:)"})," in AppDelegate. See integration guide for detailed information."]}),"\n",(0,s.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Name"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"forAppId"}),(0,s.jsxs)(n.td,{children:["If the notification is for specific client ID only. When ",(0,s.jsx)(n.code,{children:"nil"}),", all Logto clients will try to handle the notification."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"url"}),(0,s.jsx)(n.td,{children:"The URL that needs to be handled."})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"inituseconfigsocialpluginssession",children:(0,s.jsx)(n.code,{children:"init(useConfig:socialPlugins:session:)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-swift",children:"public init(\n    useConfig config: LogtoConfig,\n    socialPlugins: [LogtoSocialPlugin] = [],\n    session: NetworkSession = URLSession.shared\n)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"signinwithbrowserredirecturi",children:(0,s.jsx)(n.code,{children:"signInWithBrowser(redirectUri:)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-swift",children:"public func signInWithBrowser(\n    redirectUri: String\n) async throws\n"})}),"\n",(0,s.jsx)(n.p,{children:"Start a sign in session with WKWebView. If the function returns with no error threw, it means the user has signed in successfully."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Throws: An error if the session failed to complete."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Name"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"redirectUri"}),(0,s.jsx)(n.td,{children:"One of Redirect URIs of this application."})]})})]}),"\n",(0,s.jsx)(n.h3,{id:"signout",children:(0,s.jsx)(n.code,{children:"signOut()"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-swift",children:"func signOut() async -> Errors.SignOut?\n"})}),"\n",(0,s.jsx)(n.p,{children:"Clear all tokens in memory and Keychain. Also try to revoke the Refresh Token from the OIDC provider."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Returns: An error if failed to revoke the token. Usually the error is safe to ignore."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"getaccesstokenfor",children:(0,s.jsx)(n.code,{children:"getAccessToken(for:)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-swift",children:"@MainActor public func getAccessToken(for resource: String?) async throws -> String\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Get an Access Token for the given resource. If resource is ",(0,s.jsx)(n.code,{children:"nil"}),", return the Access Token for user endpoint."]}),"\n",(0,s.jsxs)(n.p,{children:["If the cached Access Token has expired, this function will try to use ",(0,s.jsx)(n.code,{children:"refreshToken"})," to fetch a new Access Token from the OIDC provider."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Throws: An error if failed to get a valid Access Token."}),"\n",(0,s.jsx)(n.li,{children:"Returns: Access Token in string."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Name"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"resource"}),(0,s.jsx)(n.td,{children:"The resource indicator."})]})})]}),"\n",(0,s.jsx)(n.h3,{id:"fetchuserinfo",children:(0,s.jsx)(n.code,{children:"fetchUserInfo()"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-swift",children:"public func fetchUserInfo() async throws -> LogtoCore.UserInfoResponse\n"})}),"\n",(0,s.jsx)(n.h3,{id:"getidtokenclaims",children:(0,s.jsx)(n.code,{children:"getIdTokenClaims()"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-swift",children:"public func getIdTokenClaims() throws -> IdTokenClaims\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Get structured ",(0,s.jsx)(n.a,{href:"https://openid.net/specs/openid-connect-core-1_0.html#IDToken",children:"ID Token Claims"}),"."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Throws: An error if no ID Token presents or decode token failed."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"handleurl",children:(0,s.jsx)(n.code,{children:"handle(url:)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-swift",children:"public func handle(url: URL) -> Bool\n"})}),"\n",(0,s.jsx)(n.p,{children:"Try to handle the given URL by iterating all social plugins."}),"\n",(0,s.jsx)(n.p,{children:"The iteration stops when one of the social plugins handled the URL."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Returns: ",(0,s.jsx)(n.code,{children:"true"})," if one of the social plugins handled this URL."]}),"\n"]})]})}function a(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},17279:function(e,n,i){i.d(n,{Z:function(){return c},a:function(){return o}});var s=i(50959);const t={},r=s.createContext(t);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);
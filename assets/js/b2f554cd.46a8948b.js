"use strict";(self.webpackChunk_logto_docs=self.webpackChunk_logto_docs||[]).push([[1477],{30010:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"ciam-102-authz-and-rbac","metadata":{"permalink":"/blog/ciam-102-authz-and-rbac","source":"@site/blog/2023-02-05-ciam-102-authz-and-rbac/index.md","title":"CIAM 102: Authorization & Role-based Access Control","description":"Background","date":"2023-02-05T00:00:00.000Z","formattedDate":"February 5, 2023","tags":[{"label":"ciam","permalink":"/blog/tags/ciam"},{"label":"auth","permalink":"/blog/tags/auth"},{"label":"authorization","permalink":"/blog/tags/authorization"}],"readingTime":5.905,"hasTruncateMarker":true,"authors":[{"name":"Gao","title":"Founder of Silverhand","url":"https://github.com/gao-sun","imageURL":"https://github.com/gao-sun.png","key":"gao"}],"frontMatter":{"slug":"ciam-102-authz-and-rbac","authors":"gao","tags":["ciam","auth","authorization"]},"nextItem":{"title":"CIAM 101: Authentication, Identity, SSO","permalink":"/blog/ciam-101-intro-authn-sso"}},"content":"## Background\\n\\nIn the previous article, we introduced the concept of AuthN and AuthZ, along with some headachy terms: Identity, Organization, Tenant, etc.\\n\\nOrganization and Tenant are great for grouping Identities, but they lead to an absolute democracy: everyone can do anything in this system. While utopia is still a mystery, let\u2019s take a look at the governance of access: Authorization (AuthZ).\\n\\n\x3c!--truncate--\x3e\\n\\n### Why do we need authorization?\\n\\n:::info Recall\\nAuthorization (AuthZ) answers the question \u201cWhat can you do?\u201d\\n:::\\n\\nNotion is a great example. For each page you own, you can choose to keep it private, accessible only to you, or share it with friends, or even the public.\\n\\nOr, for an online bookstore, you want everyone to be able to view all books, but customers to only view their own orders, and sellers to manage only the books in their stores.\\n\\nAuthZ and AuthN are essential components of a complex business model. They often go hand-in-hand; AuthZ verifies a user\'s access, while AuthN authenticates identities. Both are necessary for a secure system.\\n\\n## The basic authorization model\\n\\nHere\u2019s one of the most common AuthZ models: If **IDENTITY** performs **ACTION** on **RESOURCE**, then **ACCEPT** or **DENY**.\\n\\nIn the Notion example, the model is **PERSON** performs **VIEW** on **PAGE.**\\n\\nIf the page is private:\\n\\n- You\u2019ll receive **ACCEPT** when performing **VIEW** on your **PAGE**.\\n- Everyone else should receive **DENY** when performing **VIEW** on your **PAGE**.\\n\\nBased on consensus, the industry developed various authorization technologies, such as Role-based Access Control (RBAC), Attribute-based Access Control (ABAC). Today, we will focus on the [NIST RBAC model](https://csrc.nist.gov/CSRC/media/Publications/conference-paper/2000/07/26/the-nist-model-for-role-based-access-control-towards-a-unified-/documents/sandhu-ferraiolo-kuhn-00.pdf) Level 1: Flat RBAC.\\n\\n## Role-based Access Control\\n\\n:::info\\nThe NIST RBAC model left many things open to provide flexibility and adaptability for various scenarios. Logto now adopts the Level 1 definition with an additional concept \\"Resource\\" (i.e. API Resource).\\n:::\\n\\nLet\'s extend the bookstore example. Say we have many customers, but only one seller:\\n\\n- Customers can view and order books, as well as view their own orders.\\n- The seller can view, create, and delete books, and manage customer orders.\\n\\n### Define resources\\n\\nIn Logto, a resource (i.e. API Resource) usually represents a set of entities or items, since it\u2019s required to use a valid URL as the indicator. Hence we define two resources:\\n\\n- Books: `https://api.bookstore.io/books`\\n- Orders: `https://api.bookstore.io/orders`\\n\\nOne of the advantages of enforcing the URL format is it can map to a real address of your API service, which improves the readability and recognizability when integrating with other components in the system.\\n\\n:::note\\n\ud83e\udd14 Resources should be divided according to the needs of the business. There is no one-size-fits-all approach; the decision should be made on a case-by-case basis. The example in this article that divides Books and Orders may be suitable for microservices, but not for a monolithic architecture.\\n:::\\n\\n### Define permissions\\n\\nSince we introduced the concept of resource, in Logto, we also enforce that permissions must belong to a resource, in reverse, resources can have permissions.\\n\\nLet\u2019s add some permissions the the resources:\\n\\n- Books: `read`, `create`, `delete`\\n- Orders: `read`, `read:self`, `create:self`, `delete`\\n\\nAlthough there\u2019s no requirement of the name of a permission, we have the convention as below:\\n\\n```\\n<action>[:<target>]\\n```\\n\\nWhile `<action>` is required to describe a permission, `:<target>` can be ignored to describe a general target, i.e. to all entities or items in the resource. For example:\\n\\n- Permission `read` in resource Books means the action to read arbitrary books.\\n- Permission `create:self` in resource Orders means the action to create orders that belong to the current user.\\n\\n### Define roles\\n\\nIn short, a role is a group of permissions. Let\u2019s create two roles `customer` and `seller` and assign permissions to them as below:\\n\\n```mermaid\\nerDiagram\\n\\t\\"Role: customer\\" {\\n\\t\\tpermission Books \\"read\\"\\n\\t\\tpermission Orders \\"read:self\\"\\n\\t\\tpermission Orders \\"create:self\\"\\n\\t}\\n\\n\\t\\"Role: seller\\" {\\n\\t\\tpermission Books \\"read\\"\\n\\t\\tpermission Books \\"create\\"\\n\\t\\tpermission Books \\"delete\\"\\n\\t\\tpermission Orders \\"read\\"\\n\\t\\tpermission Orders \\"delete\\"\\n\\t}\\n\\n```\\n\\nYou may notice the permission-role assignment is many-to-many relations.\\n\\n### Assign roles to users\\n\\nJust like role-permission assignment, user-role assignment is also a many-to-many relationship. Therefore, you can assign multiple roles to a single user, and a single role can be assigned to multiple users.\\n\\n### Connect to dots\\n\\nHere\u2019s a complete relationship diagram for the Level 1 RBAC model in Logto:\\n\\n```mermaid\\nerDiagram\\n\\tUser }|--|{ Role : maps\\n\\tRole }|--|{ Permission : maps\\n\\t\\"API Resource\\" ||--|{ Permission : contains\\n```\\n\\nIn the RBAC model, permissions are always \\"positive\\", meaning the authorization judgement is simple: if a user has the permission, then accept; otherwise, reject.\\n\\nLet\'s say Alice has the role `seller`, Bob and Carol have the role `customer`. We\'ll describe actions in natural language first, and transpile them to the standard authorization format: **IDENTITY** performs **ACTION** on **RESOURCE**, finally giving the conclusion.\\n\\n- Alice wants to add a new book for sale:\\n  - User Alice performs `create` on resource Books (`https://api.bookstore.io/books`).\\n  - Since Alice has been assigned the permission `create` of Books according to their role `seller`, the result is \u2705 **ACCEPT**.\\n- Alice wants to view all orders to see if the sale meets their expectation:\\n  - User Alice performs `read` on resource Orders (`https://api.bookstore.io/orders`).\\n  - Since Alice has been assigned the permission `read` of Orders according to their role `seller`, the result is \u2705 **ACCEPT**.\\n- Bob wants to browse the book list to see if there\u2019s any books they want to purchase.\\n  - User Bob performs `read` on resource Books (`https://api.bookstore.io/books`).\\n  - Since Bob has been assigned the permission `read` of Books according to their role `cusomter`, the result is \u2705 **ACCEPT**.\\n- Bob wants to view Carol\u2019s order.\\n  - Since it\u2019s someone else\u2019s order, the permission `read:self` of `Orders` does not work here.\\n  - User Bob performs `read` on resource Orders (`https://api.bookstore.io/order`).\\n  - Since Bob has no permission `read` of Orders, the result is \u274c **DENY**.\\n\\n### Other RBAC levels\\n\\nThere are four levels in the NIST RBAC model:\\n\\n- Flat RBAC\\n- Hierarchical RBAC\\n- Constrained RBAC\\n- Symmetric RBAC\\n\\nSee the [paper](https://csrc.nist.gov/CSRC/media/Publications/conference-paper/2000/07/26/the-nist-model-for-role-based-access-control-towards-a-unified-/documents/sandhu-ferraiolo-kuhn-00.pdf) for details if you are interested.\\n\\nLogto now has the Level 1 implementation and will progress to higher levels based on community feedback. Don\u2019t hesitate to let us know if a higher level fits your need!\\n\\n## In practice\\n\\nBeside the theory, we still have heavy technical works to complete in order to make the model work as expected:\\n\\n- Client and auth server development\\n- Database design for RBAC\\n- Validation across different services\\n- Security and open-standard compliance\\n- Role, permission, resource management and assignment\\n\\nDon\u2019t panic. We\'ve taken this into account and added out-of-the-box support to cover all of the above. Check out the recipe to learn how to use RBAC in Logto.\\n\\n## Closing notes\\n\\nRBAC is a powerful access management model for most cases, but there\u2019s no silver bullet. We still have some questions:\\n\\n- Do I need high levels of RBAC?\\n- How does RBAC compare to other authorization models?\\n- How to define authorization model between different Organizations?\\n\\n:::note\\n\ud83d\udd25 Stay tuned. We\u2019ll see you in CIAM 103!\\n:::"},{"id":"ciam-101-intro-authn-sso","metadata":{"permalink":"/blog/ciam-101-intro-authn-sso","source":"@site/blog/2022-11-28-ciam-101-authn-identity-sso/index.mdx","title":"CIAM 101: Authentication, Identity, SSO","description":"Background","date":"2022-11-28T00:00:00.000Z","formattedDate":"November 28, 2022","tags":[{"label":"ciam","permalink":"/blog/tags/ciam"},{"label":"auth","permalink":"/blog/tags/auth"},{"label":"authentication","permalink":"/blog/tags/authentication"}],"readingTime":12.6,"hasTruncateMarker":true,"authors":[{"name":"Gao","title":"Founder of Silverhand","url":"https://github.com/gao-sun","imageURL":"https://github.com/gao-sun.png","key":"gao"}],"frontMatter":{"slug":"ciam-101-intro-authn-sso","authors":"gao","tags":["ciam","auth","authentication"]},"prevItem":{"title":"CIAM 102: Authorization & Role-based Access Control","permalink":"/blog/ciam-102-authz-and-rbac"},"nextItem":{"title":"Logto x Hasura: How to use open-source auth + GraphQL solution to boost your project","permalink":"/blog/logto-x-hasura"}},"content":"## Background\\n\\nI began the build Logto because I noticed that Identity and Access Management (IAM) had become increasingly complex and expansive over time. The concept of IAM is even large enough to give rise to new concepts, such as WIAM (Workforce IAM) and CIAM (Customer IAM).\\n\\nWhile WIAM and CIAM share the same foundation, they have distinct use cases: WIAM is typically used for internal users, while CIAM is used for external customers.\x3c!--truncate--\x3e Some examples:\\n\\n- **WIAM** Your company has a unified identity system for employees, thus every one can use the same account to access company resources, such as software subscriptions, cloud computing services, etc.\\n- **CIAM** Your online bookstore requires a user identity system for customers and sellers. The sign-in experience is a critical part of onboarding, as it is located at the top of the conversion funnel.\\n\\nLogto started with the CIAM for various reasons (we\u2019ll have another article talking about this). During development, we realized that building a unified understanding across the team would be beneficial before taking our product to the next level. We hope this will also help you gain a better grasp of the IAM landscape.\\n\\nLet\u2019s get started!\\n\\n## The basics of CIAM\\n\\n:::info\\nRegardless of their differences, WIAM and CIAM both have the same foundation: authentication and authorization. These two concepts are at the core of their features.\\n:::\\n\\nIn this article, we\'ll focus on the fundamental concepts of CIAM and problems we may meet during or after the authentication flow. We\u2019ll also discuss Single Sign-On (SSO) and its related scenarios.\\n\\n### Authentication and authorization\\n\\n:::info Definition\\n- Authentication (AuthN) answers the question \u201cWho are you?\u201d\\n- Authorization (AuthZ) answers the question \u201cWhat can you do?\u201d\\n:::\\n\\nIf you discover something that does not fit into either of these two categories, it is likely not essential to the identity business.\\n\\n- **Examples for authentication**\\n  - Password sign-in, passwordless sign-in, social sign-in, etc.\\n  - Machine-to-Machine authentication\\n- **Examples for authorization**\\n  - Role-based Access Control\\n  - Attribute-based Access Control\\n- **Examples for exceptions**\\n  - Non-identity data\\n  - Web hooks\\n\\n### Identity and Tenant\\n\\nIdentity typically represents either a user or a machine. Upon successful authentication, an ID Token is issued as an Identity.\\n\\nIn other words, the main purpose of authentication is to obtain an Identity.\\n\\nA Tenant is a group of identities:\\n\\n```mermaid\\ngraph TD\\n  Tenant --- A[Identity: User 1]\\n  Tenant --- B[Identity: User 2]\\n  Tenant --- C[Identity: Machine 1]\\n```\\n\\nWhen we discuss \\"Multi-tenant\\", we are referring to multiple Logto instances that are identity-isolated from one another. In other words, multiple Logto instances.\\n\\n```mermaid\\ngraph TD\\n  T1[Tenant 1] --- A[Identity: User 1]\\n  T2[Tenant 2] --- B[Identity: User 1]\\n  T2[Tenant 2] --- C[Identity: Machine 1]\\n  subgraph IS2[Identity system 2]\\n    T2\\n\\t  B\\n    C\\n  end\\n  subgraph IS1[Identity system 1]\\n    T1\\n    A\\n  end\\n```\\n\\nNote it has two **isolated** identity systems, i.e. you cannot use the Identity of Tenant 1 in Tenant 2, even for the same identifier (email,  phone, etc.). It\'s like your Costco membership not being valid at Whole Foods.\\n\\n:::info\\n\ud83e\uddf1 In short, there are \u201cphysical walls\u201d between Tenants.\\n:::\\n\\n:::note\\nThe definition of \\"Tenant\\" varies across CIAM products. Some refer to the term \\"Organization\\" in Logto, which will be introduced later.\\n:::\\n\\n### App and Tenant\\n\\nJust like Identity, an App also belongs to a Tenant. Several things to remember:\\n\\n- There is typically no direct relationship between an App and an Identity.\\n    - An Identity can represent an App, but there is no direct connection between them.\\n- Like users, apps are also Tenant-level.\\n- Apps are code, while users are human.\\n- The sole purpose of Apps are to complete authentication, i.e. to obtain an Identity.\\n\\n### Identity Provider (IdP) and Service Provider (SP)\\n\\nThe difference between these two providers is tricky but important.\\n\\n- **Identity Provider** is a service that provides authentication (AuthN) and issues identities.\\n\\nYou can find various explanations about Service Provider from Google, though they may not be satisfactory. In my mind, Service Provider is a relative concept:\\n\\n- **Service Provider (or Relying Party in [OIDC](https://openid.net/specs/openid-connect-core-1_0.html))** is a service or client that initiates authentication (AuthN) and requests the result from Identity Providers.\\n\\n#### Quiz\\n\\nConsider a typical social sign-in scenario:\\n\\n```mermaid\\ngraph LR\\n  A[iOS App] --\x3e |Invoke sign-in| Logto --\x3e |Redirect| GitHub\\n  GitHub --\x3e |Return GitHub ID| Logto --\x3e |Return Logto ID| A\\n```\\n\\n**\u2753 How many Service Providers and Identity Providers in this graph?**\\n\\n<details>\\n<summary>Answer</summary>\\n    \\nBoth have two.\\niOS App is a service provider to Logto, while Logto is an identity provider.\\nLogto is also a service provider to GitHub, while GitHub is an identity provider.\\nThus, Logto is a Service Provider also a Identity Provider.\\n</details>\\n\\n## Case study: A tech solution company\\n\\nYou are a CTO of a tech solution company, you have over 100 business partners and you have delivered over 300 projects.\\n\\n- Each project is either a web app or a mobile app with a backend service.\\n- For each business partner, you want to refactor the user system to provide SSO across its projects.\\n\\n**\u2753 How can Logto (or a CIAM product) help?**\\n\\n<details>\\n<summary>Answer</summary>\\n    \\nCreate a Logto instance for each business partner. Each partner holds a Tenant. Projects are mapped to \\"Apps\\" in Logto.\\n\\n```mermaid\\ngraph TD\\n  T1[Tenant 1] --- A[App 1]\\n  T1 --- B[App 2]\\n  T1 --- C[App 3]\\n  T1 --- U1[User 1]\\n  T1 --- U2[User 2]\\n  T2[Tenant 2] --- D[App 1]\\n  T2 --- E[App 2]\\n  T2 --- U21[User 1]\\n  T2 --- U22[User 2]\\n```\\n\\nLogto offers a universal sign-in experience (i.e. SSO) within a Tenant, so users don\u2019t need to sign in again when accessing another app in the same Tenant if they already signed in.\\n</details>\\n\\n## What we talk about when we talk about SSO\\n\\nWe found the term \u201cSSO\u201d often causes confusion. We consider Single Sign-On(In) to be a behavior, not a business concept. Therefore, SSO does not equate to \u201cSSO in WIAM\u201d.\\n\\nWhen we say \u201cit needs SSO\u201d, it can refer to one of the following cases:\\n\\n### SSO Case 1\\n\\n> \ud83d\udc49\ud83c\udffd In a big corp, employees use the same credentials to sign in to all company-licensed resources (e.g. email, IM, cloud services).\\n\\nIt is the typical WIAM scenario. In this case, only one Identity Provider is involved. We don\u2019t care for now.\\n\\n### SSO Case 2\\n\\n> \ud83d\udc49\ud83c\udffd End-users use the same credentials to sign in to all services developed by the same company (e.g. GSuite).\\n\\nLogto is currently focusing on the approach outlined above. Multiple external identity providers, such as a third-party social sign-in provider, may exist independently and without connection.\\n\\nDespite this, Logto remains the single source of truth for Identities, simply \\"borrowing\\" them from other providers. In this case, Logto acts as both an Identity Provider (to GSuite apps) and a Service Provider (to external Identity Providers).\\n\\n### SSO Case 3\\n\\n> \ud83d\udc49\ud83c\udffd End-users can only use the specific Identity Provider within the corresponding email domain to complete authentication. For example, signing in to Figma with Google Workspace.\\n\\nThis is the most common use case for SSO in CIAM. Let\u2019s take a closer look.\\n\\nIf we want to sign in to Figma using our @silverhand.io email, we can use either Social sign-in or SSO. The figures below illustrate the difference between the two:\\n\\n<div style={{ padding: \'2rem\', display: \'grid\', gridTemplateColumns: \'1fr 1fr\', gap: \'1.5rem\' }}>\\n<div>\\n<center>\\n\\n```mermaid\\ngraph TD\\n  A(Figma home) --\x3e |\\"Click &quot;Sign in&quot;\\"| B(Sign-in page) --\x3e |\\"Click &quot;Sign in with Google&quot;\\"| C(Google)\\n  C --\x3e |Redirect when finish| A\\n```\\n\\n*Social sign-in*\\n\\n</center>\\n\\n</div>\\n<div>\\n<center>\\n\\n```mermaid\\ngraph TD\\n  A(Figma home) --\x3e |\\"Click &quot;Sign in&quot;\\"| S(Sign-in page) --\x3e |\\"Click &quot;Use SSO&quot;\\"| B(SSO page) --\x3e |\\"Enter email address\\"| C(\\"X (explain later)\\") --\x3e |Redirect| D(Google Workspace)\\n\\tD --\x3e |Redirect when finish| A\\n```\\n\\n*SSO*\\n\\n</center>\\n</div>\\n</div>\\n\\nIn words:\\n\\n- After social sign-in, users are free to set a password or change the email address in Figma\\n- After SSO, users cannot set password or change any personal info including email address, since their Identities are managed by Google Workspace\\n\\nIn this case, Logto is both an Identity Provider and a Service Provider. It appears that SSO is more complex than a normal sign-in process. What are the benefits for the identity owner?\\n\\n- **Centralized control:** Keep identity information and authentication processes in one place, and ensure user information is always up-to-date. There is no need to add and remove licenses across different applications for changes.\\n- **Improved user experience:** Identity owners who require SSO are usually corporations. Their employees can use the same credentials and shared session for cross-company applications, such as Figma, Zoom, Slack, etc.\\n- **Enhanced security:** You may have noticed that some corporations require specific sign-in methods, such as dynamic verification codes. Using SSO can ensure that every employee uses the same sign-in method combination for accessing all resources.\\n\\n> \ud83e\udd14 Smart like you must have noticed that this is actually **SSO Case 1** from the SaaS perspective.\\n\\nIt\u2019s time to discuss the \\"X\\" in the SSO graph. This represents the process of Figma connecting the email domain to a specific Identity Provider. But, how does it work?\\n\\n## SSO mapping\\n\\nSince the request often comes from enterprise clients, we refer to the process of \\"SSO Case 3\\" from the previous section as \\"Enterprise SSO\\" for clarity.\\n\\nWe can easily devise a naive solution: create a mapping between email domains and SSO methods, then manually update it.\\n\\nThe action of process \u201cX\u201d is now clear:\\n\\n> \ud83d\udd0d **Find the mapped Enterprise SSO method of the given email domain**\\n\\nThus, if you configure `silverhand.io` as a valid email domain that connects with a Google Workspace SSO URL, users who try to sign in with an `@silverhand.io` email will be redirected to the corresponding Google Workspace sign-in page, instead of being processed in-place.\\n\\nWhen you only have a few dozen clients that need Enterprise SSO, manually managing the mapping is okay. However, there are more considerations to take into account:\\n\\n1. *What if there are hundreds or thousands Enterprise SSO clients?*\\n2. *What\u2019s the relationship between \u201cnormal users\u201d and \u201cEnterprise SSO users\u201d?*\\n3. *Should data be isolated between different Enterprise SSO clients?*\\n4. *Is there a need to provide a dashboard for the Enterprise SSO admins to view active users, audit logs, etc.?*\\n5. *How can accounts be automatically deactivated when a user is removed from the Enterprise SSO Identity Provider?*\\n\\nAnd a lot more. Since almost all Enterprise SSO are email-domain-based, we can quickly figure out a better solution:\\n\\n- If the user can prove ownership of that domain, they can set up the enterprise SSO of that domain in a self-serve manner.\\n\\nThis solution addresses the first two questions:\\n\\n> *1. What if there are hundreds or thousands Enterprise SSO clients?*\\n\\n- They can configure Enterprise SSO in a self-serve way.\\n\\n> *2. What\u2019s the relationship between \u201cnormal users\u201d and \u201cEnterprise SSO users\u201d?*\\n\\n- We open all possible sign-in methods to normal users except Enterprise SSO; While we limit the sign-in method to Enterprise SSO only to the users who are trying to sign in with the configured domains.\\n\\nAs for the third question:\\n\\n> *3. Should I isolate data between different Enterprise SSO clients?*\\n\\n- Yes and no. It\u2018s time to introduce organization.\\n\\n## Organization\\n\\nWe mentioned using email domains to recognize the specific Enterprise SSO method to use; in other words, applying a specific treatment for a specific batch of users.\\n\\nHowever, the client requirements are often more than just Enterprise SSO; for example, questions 4 and 5 in the previous section. Over the years, a mature model have been developed by outstanding SaaS companies to address these kinds of problems: Organizations.\\n\\n**Organizations rules**\\n\\n1. An organization is a group of identities, typically smaller than a Tenant.\\n2. All organizations are associated with a Tenant.\\n\\nYou may see other terms, such as \\"Workspace\\", \u201cTeam\u201d, or even \\"Tenant\\" in the software. To identify if it is the concept we are discussing, just check if it represents \u201ca group of Identities\u201d.\\n\\nIn this article, we will use the term \\"Organization\\" for consistency.\\n\\n:::note\\n\ud83e\udd39\ud83c\udffd\u200d\u2640\ufe0f In most cases, \\"a group of Identities\\" is equivalent to \\"a group of users\\". However, **the same Identity can exist in multiple Organizations**.\\n:::\\n\\nIn Notion, you can create and join multiple workspaces (i.e. Organizations) with the same email address and switch between them easily.\\n\\nFor Slack, it appears to be the same, but we suspect it uses different Identities behind the scenes since we need to create a new account for each workspace.\\n\\n<div style={{ padding: \'2rem 3rem\', display: \'grid\', gridTemplateColumns: \'1fr 1fr\', gap: \'1.5rem\' }}>\\n<center>\\n\\n![Slack workspaces](./slack-workspaces.png)\\n\\n*Slack workspaces*\\n\\n</center>\\n<center>\\n\\n![Notion workspaces](./notion-workspaces.png)\\n\\n*Notion workspaces*\\n\\n</center>\\n</div>\\n\\nNotion has a \u201cPersonal Plan\u201d available, which is normally an Organization under the hood, with the sole user (you) inside. We don\'t know the exact implementation of Notion, but this explanation is reasonable and archivable for our model.\\n\\nEach Organization also has an identifier, usually referred to as the \u201cOrganization domain\u201d.\\n\\n:::info\\nAn \\"Organization domain\\" is an internal identifier used to distinguish Organizations. It may differ from the \\"email domain\\", as the former is managed by the Service Provider, while the latter is usually provided by an external Identity Provider.\\n\\nFor example, you can use `foo` as the Organization domain in Slack, but use `@bar.io` as the email domain for this Organization.\\n:::\\n\\n### Quiz\\n\\n**\u2753 Can an app be associated with an Organization?**\\n\\n<details>\\n<summary>Answer</summary>\\n    \\nYes yes. As we discussed in the beginning, an app can have an Identity. Can you elaborate a business scenario of this?\\n</details>\\n\\n## Questions remain\\n\\n> *3. Should data be isolated between different Enterprise SSO clients?*\\n\\n- **Yes:** Isolate business data, such as messages and documents, at the Organization level.\\n- **No:** Keep Identities independent, since they do not need to be associated with an Organization.\\n- Note there are three distinct entities involved here: Identities, Organizations, and Enterprise SSO configurations; which notably increased the complexity. The question itself is not specific enough.\\n\\n> *4. Is there a need to provide a dashboard for the Enterprise SSO admins to view active users, audit logs, etc.?*\\n>\\n> *5. How to automatically deactivate account when user is removed for the Enterprise SSO Identity Provider?*\\n\\n- These demands are more business-oriented and can be implemented at Organization level. We\'ll leave them open here.\\n\\n## Closing notes\\n\\nWe\'ve introduced several concepts: Authentication (AuthN), Authorization (AuthZ), Identity, Tenant, Application, Identity Provider (IdP), Service Provider (SP), Single Sign-On (SSO), and Enterprise SSO (Organization). It may take some time to understand them all.\\n\\nAs I wrote this article, I noticed that interestingly, the most expensive plans of online services often include exclusive features related to authorization, which is totally unmentioned in this article. You may already have some questions about authorization, such as:\\n\\n- How can we assign permissions to a user and verify them?\\n- What authorization model should I use?\\n- What is the best practice for applying an authorization model?\\n\\n:::note\\n\ud83d\udd25 Take a break, and see you in CIAM 102!\\n:::"},{"id":"logto-x-hasura","metadata":{"permalink":"/blog/logto-x-hasura","source":"@site/blog/2022-08-20-logto-x-hasura/index.mdx","title":"Logto x Hasura: How to use open-source auth + GraphQL solution to boost your project","description":"Intro","date":"2022-08-20T00:00:00.000Z","formattedDate":"August 20, 2022","tags":[{"label":"graphql","permalink":"/blog/tags/graphql"},{"label":"hasura","permalink":"/blog/tags/hasura"},{"label":"api","permalink":"/blog/tags/api"}],"readingTime":5.165,"hasTruncateMarker":true,"authors":[{"name":"Gao","title":"Founder of Silverhand","url":"https://github.com/gao-sun","imageURL":"https://github.com/gao-sun.png","key":"gao"}],"frontMatter":{"slug":"logto-x-hasura","authors":"gao","tags":["graphql","hasura","api"]},"prevItem":{"title":"CIAM 101: Authentication, Identity, SSO","permalink":"/blog/ciam-101-intro-authn-sso"},"nextItem":{"title":"TypeScript all-in-one: Monorepo with its pains and gains","permalink":"/blog/typescript-all-in-one"}},"content":"import logos from \'./logos.png\';\\nimport createApi from \'./create-api.png\';\\n\\n\\n## Intro\\n\\nWhen it comes to a new project, you usually cannot skip several things: APIs, authentication + authorization, identity, and end-user sign-in flow. It used to be hard to kick off these things because there are many concepts and technologies that spread widely: RESTful/GraphQL, web frontend, native client, connect clients with APIs, auth best practices to balance security and user experience, etc.\\n\\nAlso, most of the works are \u201crepeating\u201d. I mean, they are needed and similar for almost every project, with some tweaks.\\n\\n\x3c!--truncate--\x3e\\n\\nSounds scary and tedious? Don\u2019t panic. Today we have open source. With the two open-source projects below, things become not tricky :\\n\\n- [Logto](https://github.com/logto-io/logto): Helps you build the sign-in, auth, and user identity within minutes.\\n- [Hasura](https://github.com/hasura/graphql-engine): Blazing fast, instant real-time GraphQL APIs on your DB with fine-grained access control.\\n\\n<center><img alt=\\"Logto x Hasura\\" src={logos} width=\\"480\\" /></center>\\n\\nIn this article, we\u2019ll focus on connecting Logto and Hasura, which enables you to implement authentication, authorization, and GraphQL APIs without friction. Thus you can quickly jump into your business without rocket-science learning.\\n\\n\\n## Get started\\n\\n### Prerequisites\\n\\nSince both [Logto](https://docs.logto.io/docs/tutorials/get-started/) and [Hasura](https://hasura.io/docs/latest/getting-started/index/) have a decent get-started guide, we assume you have read them and have a basic feeling. Access to a running instance of both is needed.\\n\\nWe assume the accessible endpoints are:\\n\\n- Logto: `http://localhost:3001`\\n- Hasura: `http://localhost:8080`\\n\\n:::info\\nIf you are using Docker/Docker Compose, for accessing of your machine(host)\u2019s `localhost`, you can use the Docker magic string `host.docker.internal`. In this case, the Logto endpoint will be `http://host.docker.internal:3001`.\\n:::\\n\\nAlso, we assume you have a preferred platform and framework to build the client app, say React or Next.js.\\n\\n### Set up API in Logto\\n\\nIn the left navigation sidebar of your Logto Admin Console, click \u201cAPI Resources\u201d, and you\u2019ll see the API Resource management page.\\n\\nThen click the huge \u201c+ Create API Resource\u201d button in the top-right corner. In the opening modal, enter `Hasura` for API name and `https://hasura.api` for API identifier.\\n\\n<center><img alt=\\"Create API modal\\" src={createApi} width=\\"540\\" /></center>\\n\\nWe\u2019ll use this API identifier for the rest of our article. But feel free to change the values based on your preference.\\n\\nClick \u201cCreate API Resource\u201d, and it will show a message that indicates the resource has been successfully created. That\u2019s all we need in Logto for now.\\n\\n### Enable webhook authentication in Hasura\\n\\n[Hasura uses role-based access management](https://hasura.io/docs/latest/auth/index/), which handles authorization. So, we only need to figure out authentication. It supports two methods: Webhook and JWT. We choose [webhook](https://hasura.io/docs/latest/auth/authentication/webhook/) since it\u2019s more flexible.\\n\\nTo enable webhook authentication, you must set the admin secret and auth hook endpoint.\\n\\n- The admin secret is the key to having Hasura admin access when sending requests. It is required before enabling webhook authentication. Remember to keep it somewhere safe, and don\u2019t use it in production.\\n- The auth hook endpoint is a URL to send authentication requests.\\n\\nYou can set them via [environment variables](https://hasura.io/docs/latest/auth/authentication/webhook/#configuring-webhook-mode):\\n\\n```yaml\\nHASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey # Replace with your own secret\\nHASURA_GRAPHQL_AUTH_HOOK: http://localhost:3001/api/authn/hasura?resource=https://hasura.api\\n```\\n\\nYou may notice we use the API identifier filled in Logto to build the auth hook endpoint. It ensures that the user is passing the correct bearer token instead of a random one that may from malicious.\\n\\nYou need to update the auth hook endpoint if you have a different Logto endpoint or API indicator. Say you have `https://logto.domain.com` as the Logto endpoint and `https://graphql.domain.com` as the API identifier, then it will be:\\n\\n```yaml\\nHASURA_GRAPHQL_AUTH_HOOK: https://logto.domain.com/api/authn/hasura?resource=https://graphql.domain.com\\n```\\n\\nFrom now, for every GraphQL request, Hasura will bring all request headers to the Logto auth hook endpoint, and Logto will respond properly.\\n\\n## Send secured GraphQL requests\\n\\n### Summary\\n\\nSince we won\u2019t use the Hasura admin secret in production, every GraphQL request is secured by the following headers:\\n\\n- `Authorization` The standard bearer token that Logto generates.\\n- `Expected-Role` The role you want Logto to show in the auth hook response.\\n\\n:::caution\\nIf the user that the `Authorization` header indicates doesn\u2019t have the `Expected-Role`, Logto will respond with `401 Unauthorized`.\\n:::\\n\\nThe `Authorization` header requires a valid Access Token in JWT format with the Hasura API indicator for audience. Hold on - it\u2019s quite hard to remember and compose all these things. Fortunately we get Logto SDKs to simplify the geeky part.\\n\\n### Set default roles in Logto\\n\\nBy default, only the first user will have an `admin` role name. After that, Logto will NOT assign any role names to new users. But for Hasura, it is necessary to have a role to perform an authed request.\\n\\nWhile access control is still an under-the-hood feature of Logto, we don\u2019t want you to manually add the default role names. You can set an environment variable `USER_DEFAULT_ROLE_NAMES` with a comma-separated string [for Logto](https://docs.logto.io/docs/references/core/configuration). E.g.:\\n\\n```yaml\\nUSER_DEFAULT_ROLE_NAMES: user,good_user\\n```\\n\\nThen two roles `user` and `good_user` will be automatically added to newly created users. It will reflect in both `users` table and Access Tokens.\\n\\n### Integrate Logto SDK\\n\\nFollow the [integration guide](https://docs.logto.io/docs/recipes/integrate-logto/) to integrate a Logto SDK in your client app. It enables not only the ability to generate a valid Access Token for GraphQL requests, but also a smooth sign-in experience for your end-users.\\n\\nOnce you finish the guide, we need one tiny modification to the `LogtoConfig`: Add the API indicator you created in Logto Admin Console to `resources`. Taking React SDK as an example:\\n\\n```tsx\\nconst config: LogtoConfig = {\\n  endpoint: \'http://localhost:3001\',\\n  appId: \'<your-application-id>\',\\n  resources: [\'https://hasura.api\'], // Add this line\\n};\\n```\\n\\n### Send requests\\n\\nFinally! After the user is signed in, use `getAccessToken()` in Logto SDK to fetch the Access Token for Hasura GraphQL requests:\\n\\n```tsx\\nconst accessToken = await logto.getAccessToken(\'https://hasura.api\');\\n\\n// Before sending the request\\nrequest.headers.set(\'Authorization\', `Bearer ${accessToken}`);\\nrequest.headers.set(\'Expected-Role\', \'user\');\\n```\\n\\n## Recap\\n\\nWith the effort above, we successfully implemented all the non-skippable things in the intro:\\n\\n- A database-schema-driven GraphQL API endpoint\\n- An auth and identity service on top of OIDC protocol\\n- The complete end-user sign-in flow and auth state management\\n- Secured API access based on user identity and roles\\n\\nNot that hard, right? If you meet any issues, feel free to join the [Logto](https://discord.gg/vRvwuwgpVX) or [Hasura](https://discord.gg/hasura) discord server to have a live chat with the team."},{"id":"typescript-all-in-one","metadata":{"permalink":"/blog/typescript-all-in-one","source":"@site/blog/2022-08-07-typescript-all-in-one.md","title":"TypeScript all-in-one: Monorepo with its pains and gains","description":"Intro","date":"2022-08-07T00:00:00.000Z","formattedDate":"August 7, 2022","tags":[{"label":"typescript","permalink":"/blog/tags/typescript"},{"label":"monorepo","permalink":"/blog/tags/monorepo"}],"readingTime":8.93,"hasTruncateMarker":true,"authors":[{"name":"Gao","title":"Founder of Silverhand","url":"https://github.com/gao-sun","imageURL":"https://github.com/gao-sun.png","key":"gao"}],"frontMatter":{"slug":"typescript-all-in-one","authors":"gao","tags":["typescript","monorepo"]},"prevItem":{"title":"Logto x Hasura: How to use open-source auth + GraphQL solution to boost your project","permalink":"/blog/logto-x-hasura"}},"content":"## Intro\\n\\nI always had a dream of monorepo.\\n\\nI saw the monorepo approach while working for Airbnb, but it was for the frontend only. With a deep love of the JavaScript ecosystem and the \u201chappy\u201d TypeScript developing experience, I started to align frontend and backend code in the same language from ~three years ago. It was great (for hiring) but not that great for developing since our projects were still scattered across multiple repos.\\n\\n\x3c!--truncate--\x3e\\n\\n:::info FYI\\nThere are quotes around the word \u201chappy\u201d since TypeScript did bring me a lot of fun and a-ha moments, but it also let me think \u201chow could this doesn\u2019t work\u201d sometimes.\\n:::\\n\\nAs it says, \u201cthe best way of refactoring a project is to start a new one\u201d. So when I was starting my startup about one year ago, I decided to use a total monorepo strategy: put frontend and backend projects, even database schemas, into one repo.\\n\\nIn this article, I won\u2019t compare monorepo and polyrepo since it\u2019s all about philosophy. Instead, I\u2019ll focus on the building and evolving experience and assume you are familiar with the JS/TS ecosystem.\\n\\nThe final result is available on [GitHub](https://github.com/logto-io/logto).\\n\\n## Why TypeScript?\\n\\nFrankly speaking, I\u2019m a fan of JavaScript and TypeScript. I love the compatibility of its flexibility and rigorousness: you can fall back to `unknown` or `any` (although we banned any form of `any` in our codebase), or use a super-strict lint rule set to align the code style across the team.\\n\\nWhen we were talking about the concept of \u201cfullstack\u201d before, we usually imagine at least two ecosystems and programming languages: one for frontend and one for backend.\\n\\nOne day, I suddenly realized it could be simpler: Node.js is fast enough (believe me, in most cases, code quality is more important than running speed), TypeScript is mature enough (works well in big frontend projects), and the monorepo concept has been practiced by a bunch of famous teams (React, Babel, etc.) - so why don\u2019t we combine all the code together, from frontend to backend? This can make engineers do the jobs without context switch in one repo and implement a complete feature in (almost) one language.\\n\\n## Choosing package manager\\n\\nAs a developer, and as usual, I couldn\u2019t wait to start coding. But this time, things were different.\\n\\nThe choice of the package manager is critical to the dev experience in a monorepo.\\n\\n:::info \ud83d\udd28 TL; DR\\nWe chose lerna with pnpm.\\n:::\\n\\n### The pain of inertia\\n\\nIt was July 2021. I started with `yarn@1.x` since I\u2019ve been using it for a long time. Yarn was fast, but soon I met several issues with Yarn Workspaces. E.g., [not hoisting dependencies correctly](https://github.com/yarnpkg/yarn/issues/7572), and tons of issues are tagged with \u201c[fixed in modern](https://github.com/yarnpkg/yarn/issues?q=label%3Afixed-in-modern+)\u201d, which redirects me to the v2 ([berry](https://github.com/yarnpkg/berry)).\\n\\n\u201cOkay fine I\u2019m upgrading now.\u201d I stopped struggling with v1 and started to migrate. But the long [migration guide](https://yarnpkg.com/getting-started/migration) of berry frightened me, and I gave up after several failed tries.\\n\\n### It just works\\n\\nSo the research about package managers began. I was absorbed by `pnpm` after a trial: fast as yarn, native monorepo support, similar commands to `npm`, hard links, etc. Most importantly, it just works. As a developer who wants to get started with a product but NOT develop a package manager, I just wanted to add some dependencies and start the project without knowing how a package manager works or any other fancy concepts.\\n\\nBased on the same idea, we chose an old friend `lerna` for executing commands across the packages and publishing workspace packages.\\n\\n:::info\\nNow pnpm has a -w option to run commands in the workspace root and --filter for filtering. Thus you can probably replace lerna with a more dedicated package publishing CLI.\\n:::\\n\\n## Defining package scopes\\n\\nIt\u2019s hard to clearly figure out the final scope of each package in the beginning. Just start with your best try according to the status quo, and remember you can always refactor during development.\\n\\nOur [initial structure](https://github.com/logto-io/logto/tree/af7e6ccd83723d623555dafa4650e115fa795838/packages) contains four packages:\\n\\n- `core`: the backend monolith service.\\n- `phrases`: i18n key \u2192 phrase resources.\\n- `schemas`: the database and shared TypeScript schemas.\\n- `ui`: a web SPA that interacts with `core`.\\n\\n## Tech stack for fullstack\\n\\nSince we are embracing the JavaScript ecosystem and using TypeScript as our main programming language, a lot of choices are straightforward (based on my preference \ud83d\ude0a):\\n\\n- `koajs` for the backend service (core): I had a hard experience using `async/await` in `express`, so I decided to use something with native support.\\n- `i18next/react-i18next` for i18n (phrases/ui): like its simplicity of APIs and good TypeScript support.\\n- `react` for SPA (ui): Just personal preference.\\n\\n### How about schemas?\\n\\nSomething is still missing here: database system and schema <-> TypeScript definition mapping.\\n\\n#### General v.s. opinionated\\n\\nAt that point, I tried two popular approaches:\\n\\n- Use ORM with a lot of decorators.\\n- Use a query builder like Knex.js.\\n\\nBut both of them produce a strange feeling during previous development:\\n\\n- For ORM: I\u2019m not a fan of decorators, and another abstract layer of the database causes more learning effort and uncertainty for the team.\\n- For query builder: It\u2019s like writing SQL with some restrictions (in a good way), but it\u2019s not actual SQL. Thus we need to use `.raw()` for raw queries in many scenarios.\\n\\nThen I saw this article: \u201c[Stop using Knex.js: Using SQL query builder is an anti-pattern](https://gajus.medium.com/stop-using-knex-js-and-earn-30-bf410349856c)\u201d. The title looks aggressive, but the content is great. It strongly reminds me that \u201cSQL is a programming language\u201d, and I realized I could write SQL directly (just like CSS, how could I miss this!) to leverage the native language and database features instead of adding another layer and reducing the power.\\n\\nIn conclusion, I decided to stick with Postgres and [Slonik](https://github.com/gajus/slonik) (an open-source Postgres client), as the article states:\\n\\n> \u2026the benefit of allowing user to choose between the different database dialects is marginal and the overhead of developing for multiple databases at once is significant.\\n\\n#### SQL <-> TypeScript\\n\\nAnother advantage of writing SQL is we can easily use it as the single source of truth of TypeScript definitions. I wrote a [code generator](https://github.com/logto-io/logto/tree/af7e6ccd83723d623555dafa4650e115fa795838/packages/schemas/src/gen) to transpile SQL schemas to TypeScript code that we\u2019ll use in our backend, and the result looks not bad:\\n\\n```tsx\\n// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\\n\\nimport { OidcClientMetadata } from \'../foundations\';\\n\\nexport type OidcClient = {\\n  clientId: string;\\n  metadata: OidcClientMetadata;\\n  createdAt: number;\\n};\\n// ...\\n```\\n\\nWe can even connect `jsonb` with a TypeScript type and process type validation in the backend service if needed.\\n\\n:::note \ud83e\udd14 Why not use TypeScript as the SSOT?\\nIt\u2019s a plan I\u2019ve thought of. It sounds attractive initially, but SQL will precisely describe database schemas and keep the flow in one direction (see the following section) instead of using TypeScript and then \u201ctranspile back\u201d to SQL.\\n:::\\n\\n### Result\\n\\nThe final dependency structure looks like:\\n\\n```mermaid\\ngraph TD\\n  database[Postgres Database] --\x3e Schemas\\n  subgraph Monorepo\\n\\t  Phrases --\x3e Core\\n\\t  Phrases --\x3e UI\\n\\t  Schemas --\x3e Core\\n\\t  Schemas --\x3e UI\\n  end\\n```\\n\\nYou may notice it\u2019s a one-direction diagram, which greatly helped us to keep a clear architecture and the ability to expand while the project grows. Plus, the code is (basically) all in TypeScript.\\n\\n## Dev experience\\n\\n### Package and config sharing\\n\\n#### Internal dependencies\\n\\n`pnpm` and `lerna` are doing an awesome job on internal workspace dependencies. We use the command below in the project root to add sibling packages:\\n\\n```bash\\nlerna add --scope=@logto/core @logto/schemas\\n```\\n\\nIt will add `@logto/schemas` as a dependency to `@logto/core`. While keeping the semantic version in `package.json` of your internal dependencies, `pnpm` can also correctly link them in `pnpm-lock.yaml`. The result will look like this:\\n\\n```json\\n// packages/core/pacakge.json\\n{\\n  \\"dependencies\\": {\\n    \\"@logto/schemas\\": \\"^1.0.0-beta.3\\"\\n  }\\n}\\n```\\n\\n```yaml\\n# pnpm-lock.yaml\\npackages/core:\\n  dependencies:\\n    \'@logto/schemas\': link:../schemas\\n```\\n\\n#### Config sharing\\n\\nWe treat every package in monorepo \u201cindependent\u201d. Thus we can use the standard approach for config sharing, which covers `tsconfig`, `eslintConfig`, `prettier`, `stlyelint`, and `jest-config`. See [this project](https://github.com/logto-io/logto/tree/6327eb6c577cdf36c8f44b55bac8195f7d6a6335/packages/console) for example.\\n\\n### Code, lint, and commit\\n\\nI use VSCode for daily development, and in short, nothing is different when the project is configured properly:\\n\\n- ESLint and Stylelint work normally.\\n    - If you are using VSCode ESLint plugin, add the VSCode settings below to make it honors the per-package ESLint config (replace the value of `pattern` with your own):\\n    \\n    ```json\\n    {\\n    \\t\\"eslint.workingDirectories\\": [\\n    \\t  {\\n    \\t    \\"pattern\\": \\"./packages/*\\"\\n    \\t  }\\n    \\t]\\n    }\\n    ```\\n    \\n- husky, commitlint, and lint-staged work as expected.\\n\\n### Compiler and proxy\\n\\nWe are using different compilers for frontend and backend: `parceljs` for UI (React) and `tsc` for all other pure TypeScript packages. I strongly recommend you to try `parceljs` if you haven\u2019t. It\u2019s a real \u201czero-config\u201d compiler that gracefully handles different file types.\\n\\nParcel hosts its own frontend dev server, and the production output is just static files. Since we\u2019d like to mount APIs and SPA under the same origin to avoid CORS issues, the strategy below works:\\n\\n- In dev environment, use a simple HTTP proxy to redirect the traffic to the Parcel dev server.\\n- In production, serve static files directly.\\n\\nYou can find the frontend middleware function implementation [here](https://github.com/logto-io/logto/blob/6327eb6c577cdf36c8f44b55bac8195f7d6a6335/packages/core/src/middleware/koa-spa-proxy.ts).\\n\\n### Watch mode\\n\\nWe have a `dev` script in `package.json` for each package that watches the file changes and re-compile when needed. Thanks to `lerna`, things become easy using `lerna exec` to run package scripts in parallel. The root script will look like this:\\n\\n```yaml\\n\\"dev\\": \\"lerna --scope=@logto/{core,phrases,schemas,ui} exec -- pnpm dev\\"\\n```\\n\\n### Summary\\n\\nIdeally, only two steps for a new engineer/contributor to get started:\\n\\n1. Clone the repo\\n2. `pnpm i && pnpm dev`\\n\\n## Closing notes\\n\\nOur team has been developing under this approach for one year, and we are pretty happy with it. Visit our [GitHub repo](https://github.com/logto-io/logto) to see the latest shape of the project. To wrap up:\\n\\n**Pains**\\n\\n- Need to be familiar with the JS/TS ecosystem\\n- Need to choose the right package manager\\n- Require some additional one-time setup\\n\\n**Gains**\\n\\n- Develop and maintain the whole project in one repo\\n- Simplified coding skill requirements\\n- Shared code styles, schemas, phrases, and utilities\\n- Improved communication efficiency\\n    - No more questions like: What\u2019s the API definition?\\n    - All engineers are talking in the same programming language\\n- CI/CD with ease\\n    - Use the same toolchain for building, testing, and publishing\\n\\nThis article remains several topics uncovered: Setting up the repo from scratch, adding a new package, leveraging GitHub Actions for CI/CD, etc. It\u2019ll be too long for this article if I expand each of them. Feel free to comment and let me know which topic you\u2019d like to see in the future."}]}')}}]);
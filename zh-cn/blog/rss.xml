<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Logto Docs Blog</title>
        <link>https://docs.logto.io/zh-cn/blog</link>
        <description>Logto Docs Blog</description>
        <lastBuildDate>Sat, 20 Aug 2022 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>zh-cn</language>
        <item>
            <title><![CDATA[Logto x Hasura: How to use open-source auth + GraphQL solution to boost your project]]></title>
            <link>https://docs.logto.io/zh-cn/blog/logto-x-hasura</link>
            <guid>https://docs.logto.io/zh-cn/blog/logto-x-hasura</guid>
            <pubDate>Sat, 20 Aug 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Intro]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_KgUL" id="intro">Intro<a href="#intro" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>When it comes to a new project, you usually cannot skip several things: APIs, authentication + authorization, identity, and end-user sign-in flow. It used to be hard to kick off these things because there are many concepts and technologies that spread widely: RESTful/GraphQL, web frontend, native client, connect clients with APIs, auth best practices to balance security and user experience, etc.</p><p>Also, most of the works are “repeating”. I mean, they are needed and similar for almost every project, with some tweaks.</p><p>Sounds scary and tedious? Don’t panic. Today we have open source. With the two open-source projects below, things become not tricky :</p><ul><li><a href="https://github.com/logto-io/logto" target="_blank" rel="noopener noreferrer">Logto</a>: Helps you build the sign-in, auth, and user identity within minutes.</li><li><a href="https://github.com/hasura/graphql-engine" target="_blank" rel="noopener noreferrer">Hasura</a>: Blazing fast, instant real-time GraphQL APIs on your DB with fine-grained access control.</li></ul><center><img loading="lazy" alt="Logto x Hasura" src="/zh-cn/assets/images/logos-3fc88b5045a437c285845ee9fe4b015c.png" width="480" class="img_jkbZ"></center><p>In this article, we’ll focus on connecting Logto and Hasura, which enables you to implement authentication, authorization, and GraphQL APIs without friction. Thus you can quickly jump into your business without rocket-science learning.</p><h2 class="anchor anchorWithStickyNavbar_KgUL" id="get-started">Get started<a href="#get-started" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_KgUL" id="prerequisites">Prerequisites<a href="#prerequisites" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>Since both <a href="https://docs.logto.io/docs/tutorials/get-started/" target="_blank" rel="noopener noreferrer">Logto</a> and <a href="https://hasura.io/docs/latest/getting-started/index/" target="_blank" rel="noopener noreferrer">Hasura</a> have a decent get-started guide, we assume you have read them and have a basic feeling. Access to a running instance of both is needed.</p><p>We assume the accessible endpoints are:</p><ul><li>Logto: <code>http://localhost:3001</code></li><li>Hasura: <code>http://localhost:8080</code></li></ul><div class="theme-admonition theme-admonition-info alert alert--info admonition_nqcy"><div class="admonitionHeading_zpIq"><span class="admonitionIcon_IsQN"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>信息</div><div class="admonitionContent_SHEn"><p>If you are using Docker/Docker Compose, for accessing of your machine(host)’s <code>localhost</code>, you can use the Docker magic string <code>host.docker.internal</code>. In this case, the Logto endpoint will be <code>http://host.docker.internal:3001</code>.</p></div></div><p>Also, we assume you have a preferred platform and framework to build the client app, say React or Next.js.</p><h3 class="anchor anchorWithStickyNavbar_KgUL" id="set-up-api-in-logto">Set up API in Logto<a href="#set-up-api-in-logto" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>In the left navigation sidebar of your Logto Admin Console, click “API Resources”, and you’ll see the API Resource management page.</p><p>Then click the huge “+ Create API Resource” button in the top-right corner. In the opening modal, enter <code>Hasura</code> for API name and <code>https://hasura.api</code> for API identifier.</p><center><img loading="lazy" alt="Create API modal" src="/zh-cn/assets/images/create-api-c5c6e125bce972eb32323f2d4e27b436.png" width="540" class="img_jkbZ"></center><p>We’ll use this API identifier for the rest of our article. But feel free to change the values based on your preference.</p><p>Click “Create API Resource”, and it will show a message that indicates the resource has been successfully created. That’s all we need in Logto for now.</p><h3 class="anchor anchorWithStickyNavbar_KgUL" id="enable-webhook-authentication-in-hasura">Enable webhook authentication in Hasura<a href="#enable-webhook-authentication-in-hasura" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p><a href="https://hasura.io/docs/latest/auth/index/" target="_blank" rel="noopener noreferrer">Hasura uses role-based access management</a>, which handles authorization. So, we only need to figure out authentication. It supports two methods: Webhook and JWT. We choose <a href="https://hasura.io/docs/latest/auth/authentication/webhook/" target="_blank" rel="noopener noreferrer">webhook</a> since it’s more flexible.</p><p>To enable webhook authentication, you must set the admin secret and auth hook endpoint.</p><ul><li>The admin secret is the key to having Hasura admin access when sending requests. It is required before enabling webhook authentication. Remember to keep it somewhere safe, and don’t use it in production.</li><li>The auth hook endpoint is a URL to send authentication requests.</li></ul><p>You can set them via <a href="https://hasura.io/docs/latest/auth/authentication/webhook/#configuring-webhook-mode" target="_blank" rel="noopener noreferrer">environment variables</a>:</p><div class="language-yaml codeBlockContainer_DX1o theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_EwC_"><pre tabindex="0" class="prism-code language-yaml codeBlock__7R1 thin-scrollbar"><code class="codeBlockLines_QPnn"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">HASURA_GRAPHQL_ADMIN_SECRET</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> myadminsecretkey </span><span class="token comment" style="color:#999988;font-style:italic"># Replace with your own secret</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">HASURA_GRAPHQL_AUTH_HOOK</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> http</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">//localhost</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">3001/api/authn/hasura</span><span class="token punctuation" style="color:#393A34">?</span><span class="token plain">resource=https</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">//hasura.api</span><br></span></code></pre><div class="buttonGroup_I80O"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_sN_3" aria-hidden="true"><svg class="copyButtonIcon_BIKD" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_NZqA" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>You may notice we use the API identifier filled in Logto to build the auth hook endpoint. It ensures that the user is passing the correct bearer token instead of a random one that may from malicious.</p><p>You need to update the auth hook endpoint if you have a different Logto endpoint or API indicator. Say you have <code>https://logto.domain.com</code> as the Logto endpoint and <code>https://graphql.domain.com</code> as the API identifier, then it will be:</p><div class="language-yaml codeBlockContainer_DX1o theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_EwC_"><pre tabindex="0" class="prism-code language-yaml codeBlock__7R1 thin-scrollbar"><code class="codeBlockLines_QPnn"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">HASURA_GRAPHQL_AUTH_HOOK</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> https</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">//logto.domain.com/api/authn/hasura</span><span class="token punctuation" style="color:#393A34">?</span><span class="token plain">resource=https</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">//graphql.domain.com</span><br></span></code></pre><div class="buttonGroup_I80O"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_sN_3" aria-hidden="true"><svg class="copyButtonIcon_BIKD" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_NZqA" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>From now, for every GraphQL request, Hasura will bring all request headers to the Logto auth hook endpoint, and Logto will respond properly.</p><h2 class="anchor anchorWithStickyNavbar_KgUL" id="send-secured-graphql-requests">Send secured GraphQL requests<a href="#send-secured-graphql-requests" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_KgUL" id="summary">Summary<a href="#summary" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>Since we won’t use the Hasura admin secret in production, every GraphQL request is secured by the following headers:</p><ul><li><code>Authorization</code> The standard bearer token that Logto generates.</li><li><code>Expected-Role</code> The role you want Logto to show in the auth hook response.</li></ul><div class="theme-admonition theme-admonition-caution alert alert--warning admonition_nqcy"><div class="admonitionHeading_zpIq"><span class="admonitionIcon_IsQN"><svg viewBox="0 0 16 16"><path fill-rule="evenodd" d="M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"></path></svg></span>警告</div><div class="admonitionContent_SHEn"><p>If the user that the <code>Authorization</code> header indicates doesn’t have the <code>Expected-Role</code>, Logto will respond with <code>401 Unauthorized</code>.</p></div></div><p>The <code>Authorization</code> header requires a valid Access Token in JWT format with the Hasura API indicator for audience. Hold on - it’s quite hard to remember and compose all these things. Fortunately we get Logto SDKs to simplify the geeky part.</p><h3 class="anchor anchorWithStickyNavbar_KgUL" id="set-default-roles-in-logto">Set default roles in Logto<a href="#set-default-roles-in-logto" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>By default, only the first user will have an <code>admin</code> role name. After that, Logto will NOT assign any role names to new users. But for Hasura, it is necessary to have a role to perform an authed request.</p><p>While access control is still an under-the-hood feature of Logto, we don’t want you to manually add the default role names. You can set an environment variable <code>USER_DEFAULT_ROLE_NAMES</code> with a comma-separated string <a href="https://docs.logto.io/docs/references/core/configuration" target="_blank" rel="noopener noreferrer">for Logto</a>. E.g.:</p><div class="language-yaml codeBlockContainer_DX1o theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_EwC_"><pre tabindex="0" class="prism-code language-yaml codeBlock__7R1 thin-scrollbar"><code class="codeBlockLines_QPnn"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">USER_DEFAULT_ROLE_NAMES</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> user</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">good_user</span><br></span></code></pre><div class="buttonGroup_I80O"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_sN_3" aria-hidden="true"><svg class="copyButtonIcon_BIKD" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_NZqA" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Then two roles <code>user</code> and <code>good_user</code> will be automatically added to newly created users. It will reflect in both <code>users</code> table and Access Tokens.</p><h3 class="anchor anchorWithStickyNavbar_KgUL" id="integrate-logto-sdk">Integrate Logto SDK<a href="#integrate-logto-sdk" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>Follow the <a href="https://docs.logto.io/docs/recipes/integrate-logto/" target="_blank" rel="noopener noreferrer">integration guide</a> to integrate a Logto SDK in your client app. It enables not only the ability to generate a valid Access Token for GraphQL requests, but also a smooth sign-in experience for your end-users.</p><p>Once you finish the guide, we need one tiny modification to the <code>LogtoConfig</code>: Add the API indicator you created in Logto Admin Console to <code>resources</code>. Taking React SDK as an example:</p><div class="language-tsx codeBlockContainer_DX1o theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_EwC_"><pre tabindex="0" class="prism-code language-tsx codeBlock__7R1 thin-scrollbar"><code class="codeBlockLines_QPnn"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> config</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">LogtoConfig</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  endpoint</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'http://localhost:3001'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  appId</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'&lt;your-application-id&gt;'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  resources</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">'https://hasura.api'</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// Add this line</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup_I80O"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_sN_3" aria-hidden="true"><svg class="copyButtonIcon_BIKD" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_NZqA" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_KgUL" id="send-requests">Send requests<a href="#send-requests" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>Finally! After the user is signed in, use <code>getAccessToken()</code> in Logto SDK to fetch the Access Token for Hasura GraphQL requests:</p><div class="language-tsx codeBlockContainer_DX1o theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_EwC_"><pre tabindex="0" class="prism-code language-tsx codeBlock__7R1 thin-scrollbar"><code class="codeBlockLines_QPnn"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> accessToken </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">await</span><span class="token plain"> logto</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">getAccessToken</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'https://hasura.api'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Before sending the request</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">request</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">headers</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">set</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'Authorization'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token template-string string" style="color:#e3116c">Bearer </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation">accessToken</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">request</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">headers</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">set</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'Expected-Role'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'user'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup_I80O"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_sN_3" aria-hidden="true"><svg class="copyButtonIcon_BIKD" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_NZqA" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_KgUL" id="recap">Recap<a href="#recap" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>With the effort above, we successfully implemented all the non-skippable things in the intro:</p><ul><li>A database-schema-driven GraphQL API endpoint</li><li>An auth and identity service on top of OIDC protocol</li><li>The complete end-user sign-in flow and auth state management</li><li>Secured API access based on user identity and roles</li></ul><p>Not that hard, right? If you meet any issues, feel free to join the <a href="https://discord.gg/vRvwuwgpVX" target="_blank" rel="noopener noreferrer">Logto</a> or <a href="https://discord.gg/hasura" target="_blank" rel="noopener noreferrer">Hasura</a> discord server to have a live chat with the team.</p>]]></content:encoded>
            <category>graphql</category>
            <category>hasura</category>
            <category>api</category>
        </item>
        <item>
            <title><![CDATA[TypeScript all-in-one: Monorepo with its pains and gains]]></title>
            <link>https://docs.logto.io/zh-cn/blog/typescript-all-in-one</link>
            <guid>https://docs.logto.io/zh-cn/blog/typescript-all-in-one</guid>
            <pubDate>Sun, 07 Aug 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Intro]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_KgUL" id="intro">Intro<a href="#intro" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>I always had a dream of monorepo.</p><p>I saw the monorepo approach while working for Airbnb, but it was for the frontend only. With a deep love of the JavaScript ecosystem and the “happy” TypeScript developing experience, I started to align frontend and backend code in the same language from ~three years ago. It was great (for hiring) but not that great for developing since our projects were still scattered across multiple repos.</p><div class="theme-admonition theme-admonition-info alert alert--info admonition_nqcy"><div class="admonitionHeading_zpIq"><span class="admonitionIcon_IsQN"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>FYI</div><div class="admonitionContent_SHEn"><p>There are quotes around the word “happy” since TypeScript did bring me a lot of fun and a-ha moments, but it also let me think “how could this doesn’t work” sometimes.</p></div></div><p>As it says, “the best way of refactoring a project is to start a new one”. So when I was starting my startup about one year ago, I decided to use a total monorepo strategy: put frontend and backend projects, even database schemas, into one repo.</p><p>In this article, I won’t compare monorepo and polyrepo since it’s all about philosophy. Instead, I’ll focus on the building and evolving experience and assume you are familiar with the JS/TS ecosystem.</p><p>The final result is available on <a href="https://github.com/logto-io/logto" target="_blank" rel="noopener noreferrer">GitHub</a>.</p><h2 class="anchor anchorWithStickyNavbar_KgUL" id="why-typescript">Why TypeScript?<a href="#why-typescript" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>Frankly speaking, I’m a fan of JavaScript and TypeScript. I love the compatibility of its flexibility and rigorousness: you can fall back to <code>unknown</code> or <code>any</code> (although we banned any form of <code>any</code> in our codebase), or use a super-strict lint rule set to align the code style across the team.</p><p>When we were talking about the concept of “fullstack” before, we usually imagine at least two ecosystems and programming languages: one for frontend and one for backend.</p><p>One day, I suddenly realized it could be simpler: Node.js is fast enough (believe me, in most cases, code quality is more important than running speed), TypeScript is mature enough (works well in big frontend projects), and the monorepo concept has been practiced by a bunch of famous teams (React, Babel, etc.) - so why don’t we combine all the code together, from frontend to backend? This can make engineers do the jobs without context switch in one repo and implement a complete feature in (almost) one language.</p><h2 class="anchor anchorWithStickyNavbar_KgUL" id="choosing-package-manager">Choosing package manager<a href="#choosing-package-manager" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>As a developer, and as usual, I couldn’t wait to start coding. But this time, things were different.</p><p>The choice of the package manager is critical to the dev experience in a monorepo.</p><div class="theme-admonition theme-admonition-info alert alert--info admonition_nqcy"><div class="admonitionHeading_zpIq"><span class="admonitionIcon_IsQN"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>🔨 TL; DR</div><div class="admonitionContent_SHEn"><p>We chose lerna with pnpm.</p></div></div><h3 class="anchor anchorWithStickyNavbar_KgUL" id="the-pain-of-inertia">The pain of inertia<a href="#the-pain-of-inertia" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>It was July 2021. I started with <code>yarn@1.x</code> since I’ve been using it for a long time. Yarn was fast, but soon I met several issues with Yarn Workspaces. E.g., <a href="https://github.com/yarnpkg/yarn/issues/7572" target="_blank" rel="noopener noreferrer">not hoisting dependencies correctly</a>, and tons of issues are tagged with “<a href="https://github.com/yarnpkg/yarn/issues?q=label%3Afixed-in-modern+" target="_blank" rel="noopener noreferrer">fixed in modern</a>”, which redirects me to the v2 (<a href="https://github.com/yarnpkg/berry" target="_blank" rel="noopener noreferrer">berry</a>).</p><p>“Okay fine I’m upgrading now.” I stopped struggling with v1 and started to migrate. But the long <a href="https://yarnpkg.com/getting-started/migration" target="_blank" rel="noopener noreferrer">migration guide</a> of berry frightened me, and I gave up after several failed tries.</p><h3 class="anchor anchorWithStickyNavbar_KgUL" id="it-just-works">It just works<a href="#it-just-works" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>So the research about package managers began. I was absorbed by <code>pnpm</code> after a trial: fast as yarn, native monorepo support, similar commands to <code>npm</code>, hard links, etc. Most importantly, it just works. As a developer who wants to get started with a product but NOT develop a package manager, I just wanted to add some dependencies and start the project without knowing how a package manager works or any other fancy concepts.</p><p>Based on the same idea, we chose an old friend <code>lerna</code> for executing commands across the packages and publishing workspace packages.</p><div class="theme-admonition theme-admonition-info alert alert--info admonition_nqcy"><div class="admonitionHeading_zpIq"><span class="admonitionIcon_IsQN"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>信息</div><div class="admonitionContent_SHEn"><p>Now pnpm has a -w option to run commands in the workspace root and --filter for filtering. Thus you can probably replace lerna with a more dedicated package publishing CLI.</p></div></div><h2 class="anchor anchorWithStickyNavbar_KgUL" id="defining-package-scopes">Defining package scopes<a href="#defining-package-scopes" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>It’s hard to clearly figure out the final scope of each package in the beginning. Just start with your best try according to the status quo, and remember you can always refactor during development.</p><p>Our <a href="https://github.com/logto-io/logto/tree/af7e6ccd83723d623555dafa4650e115fa795838/packages" target="_blank" rel="noopener noreferrer">initial structure</a> contains four packages:</p><ul><li><code>core</code>: the backend monolith service.</li><li><code>phrases</code>: i18n key → phrase resources.</li><li><code>schemas</code>: the database and shared TypeScript schemas.</li><li><code>ui</code>: a web SPA that interacts with <code>core</code>.</li></ul><h2 class="anchor anchorWithStickyNavbar_KgUL" id="tech-stack-for-fullstack">Tech stack for fullstack<a href="#tech-stack-for-fullstack" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>Since we are embracing the JavaScript ecosystem and using TypeScript as our main programming language, a lot of choices are straightforward (based on my preference 😊):</p><ul><li><code>koajs</code> for the backend service (core): I had a hard experience using <code>async/await</code> in <code>express</code>, so I decided to use something with native support.</li><li><code>i18next/react-i18next</code> for i18n (phrases/ui): like its simplicity of APIs and good TypeScript support.</li><li><code>react</code> for SPA (ui): Just personal preference.</li></ul><h3 class="anchor anchorWithStickyNavbar_KgUL" id="how-about-schemas">How about schemas?<a href="#how-about-schemas" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>Something is still missing here: database system and schema &lt;-&gt; TypeScript definition mapping.</p><h4 class="anchor anchorWithStickyNavbar_KgUL" id="general-vs-opinionated">General v.s. opinionated<a href="#general-vs-opinionated" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h4><p>At that point, I tried two popular approaches:</p><ul><li>Use ORM with a lot of decorators.</li><li>Use a query builder like Knex.js.</li></ul><p>But both of them produce a strange feeling during previous development:</p><ul><li>For ORM: I’m not a fan of decorators, and another abstract layer of the database causes more learning effort and uncertainty for the team.</li><li>For query builder: It’s like writing SQL with some restrictions (in a good way), but it’s not actual SQL. Thus we need to use <code>.raw()</code> for raw queries in many scenarios.</li></ul><p>Then I saw this article: “<a href="https://gajus.medium.com/stop-using-knex-js-and-earn-30-bf410349856c" target="_blank" rel="noopener noreferrer">Stop using Knex.js: Using SQL query builder is an anti-pattern</a>”. The title looks aggressive, but the content is great. It strongly reminds me that “SQL is a programming language”, and I realized I could write SQL directly (just like CSS, how could I miss this!) to leverage the native language and database features instead of adding another layer and reducing the power.</p><p>In conclusion, I decided to stick with Postgres and <a href="https://github.com/gajus/slonik" target="_blank" rel="noopener noreferrer">Slonik</a> (an open-source Postgres client), as the article states:</p><blockquote><p>…the benefit of allowing user to choose between the different database dialects is marginal and the overhead of developing for multiple databases at once is significant.</p></blockquote><h4 class="anchor anchorWithStickyNavbar_KgUL" id="sql---typescript">SQL &lt;-&gt; TypeScript<a href="#sql---typescript" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h4><p>Another advantage of writing SQL is we can easily use it as the single source of truth of TypeScript definitions. I wrote a <a href="https://github.com/logto-io/logto/tree/af7e6ccd83723d623555dafa4650e115fa795838/packages/schemas/src/gen" target="_blank" rel="noopener noreferrer">code generator</a> to transpile SQL schemas to TypeScript code that we’ll use in our backend, and the result looks not bad:</p><div class="language-tsx codeBlockContainer_DX1o theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_EwC_"><pre tabindex="0" class="prism-code language-tsx codeBlock__7R1 thin-scrollbar"><code class="codeBlockLines_QPnn"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports"> </span><span class="token imports maybe-class-name">OidcClientMetadata</span><span class="token imports"> </span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'../foundations'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token class-name">OidcClient</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  clientId</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  metadata</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">OidcClientMetadata</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  createdAt</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">number</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><br></span></code></pre><div class="buttonGroup_I80O"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_sN_3" aria-hidden="true"><svg class="copyButtonIcon_BIKD" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_NZqA" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>We can even connect <code>jsonb</code> with a TypeScript type and process type validation in the backend service if needed.</p><div class="theme-admonition theme-admonition-note alert alert--secondary admonition_nqcy"><div class="admonitionHeading_zpIq"><span class="admonitionIcon_IsQN"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>🤔 Why not use TypeScript as the SSOT?</div><div class="admonitionContent_SHEn"><p>It’s a plan I’ve thought of. It sounds attractive initially, but SQL will precisely describe database schemas and keep the flow in one direction (see the following section) instead of using TypeScript and then “transpile back” to SQL.</p></div></div><h3 class="anchor anchorWithStickyNavbar_KgUL" id="result">Result<a href="#result" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>The final dependency structure looks like:</p><p>You may notice it’s a one-direction diagram, which greatly helped us to keep a clear architecture and the ability to expand while the project grows. Plus, the code is (basically) all in TypeScript.</p><h2 class="anchor anchorWithStickyNavbar_KgUL" id="dev-experience">Dev experience<a href="#dev-experience" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_KgUL" id="package-and-config-sharing">Package and config sharing<a href="#package-and-config-sharing" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><h4 class="anchor anchorWithStickyNavbar_KgUL" id="internal-dependencies">Internal dependencies<a href="#internal-dependencies" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h4><p><code>pnpm</code> and <code>lerna</code> are doing an awesome job on internal workspace dependencies. We use the command below in the project root to add sibling packages:</p><div class="language-bash codeBlockContainer_DX1o theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_EwC_"><pre tabindex="0" class="prism-code language-bash codeBlock__7R1 thin-scrollbar"><code class="codeBlockLines_QPnn"><span class="token-line" style="color:#393A34"><span class="token plain">lerna </span><span class="token function" style="color:#d73a49">add</span><span class="token plain"> --scope</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">@logto/core @logto/schemas</span><br></span></code></pre><div class="buttonGroup_I80O"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_sN_3" aria-hidden="true"><svg class="copyButtonIcon_BIKD" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_NZqA" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>It will add <code>@logto/schemas</code> as a dependency to <code>@logto/core</code>. While keeping the semantic version in <code>package.json</code> of your internal dependencies, <code>pnpm</code> can also correctly link them in <code>pnpm-lock.yaml</code>. The result will look like this:</p><div class="language-json codeBlockContainer_DX1o theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_EwC_"><pre tabindex="0" class="prism-code language-json codeBlock__7R1 thin-scrollbar"><code class="codeBlockLines_QPnn"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// packages/core/pacakge.json</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token property" style="color:#36acaa">"dependencies"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"@logto/schemas"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"^1.0.0-beta.3"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup_I80O"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_sN_3" aria-hidden="true"><svg class="copyButtonIcon_BIKD" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_NZqA" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="language-yaml codeBlockContainer_DX1o theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_EwC_"><pre tabindex="0" class="prism-code language-yaml codeBlock__7R1 thin-scrollbar"><code class="codeBlockLines_QPnn"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># pnpm-lock.yaml</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">packages/core</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">dependencies</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">'@logto/schemas'</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> link</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">../schemas</span><br></span></code></pre><div class="buttonGroup_I80O"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_sN_3" aria-hidden="true"><svg class="copyButtonIcon_BIKD" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_NZqA" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithStickyNavbar_KgUL" id="config-sharing">Config sharing<a href="#config-sharing" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h4><p>We treat every package in monorepo “independent”. Thus we can use the standard approach for config sharing, which covers <code>tsconfig</code>, <code>eslintConfig</code>, <code>prettier</code>, <code>stlyelint</code>, and <code>jest-config</code>. See <a href="https://github.com/logto-io/logto/tree/6327eb6c577cdf36c8f44b55bac8195f7d6a6335/packages/console" target="_blank" rel="noopener noreferrer">this project</a> for example.</p><h3 class="anchor anchorWithStickyNavbar_KgUL" id="code-lint-and-commit">Code, lint, and commit<a href="#code-lint-and-commit" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>I use VSCode for daily development, and in short, nothing is different when the project is configured properly:</p><ul><li>ESLint and Stylelint work normally.<ul><li><p>If you are using VSCode ESLint plugin, add the VSCode settings below to make it honors the per-package ESLint config (replace the value of <code>pattern</code> with your own):</p><div class="language-json codeBlockContainer_DX1o theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_EwC_"><pre tabindex="0" class="prism-code language-json codeBlock__7R1 thin-scrollbar"><code class="codeBlockLines_QPnn"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"eslint.workingDirectories"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token property" style="color:#36acaa">"pattern"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"./packages/*"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup_I80O"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_sN_3" aria-hidden="true"><svg class="copyButtonIcon_BIKD" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_NZqA" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></li></ul></li><li>husky, commitlint, and lint-staged work as expected.</li></ul><h3 class="anchor anchorWithStickyNavbar_KgUL" id="compiler-and-proxy">Compiler and proxy<a href="#compiler-and-proxy" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>We are using different compilers for frontend and backend: <code>parceljs</code> for UI (React) and <code>tsc</code> for all other pure TypeScript packages. I strongly recommend you to try <code>parceljs</code> if you haven’t. It’s a real “zero-config” compiler that gracefully handles different file types.</p><p>Parcel hosts its own frontend dev server, and the production output is just static files. Since we’d like to mount APIs and SPA under the same origin to avoid CORS issues, the strategy below works:</p><ul><li>In dev environment, use a simple HTTP proxy to redirect the traffic to the Parcel dev server.</li><li>In production, serve static files directly.</li></ul><p>You can find the frontend middleware function implementation <a href="https://github.com/logto-io/logto/blob/6327eb6c577cdf36c8f44b55bac8195f7d6a6335/packages/core/src/middleware/koa-spa-proxy.ts" target="_blank" rel="noopener noreferrer">here</a>.</p><h3 class="anchor anchorWithStickyNavbar_KgUL" id="watch-mode">Watch mode<a href="#watch-mode" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>We have a <code>dev</code> script in <code>package.json</code> for each package that watches the file changes and re-compile when needed. Thanks to <code>lerna</code>, things become easy using <code>lerna exec</code> to run package scripts in parallel. The root script will look like this:</p><div class="language-yaml codeBlockContainer_DX1o theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_EwC_"><pre tabindex="0" class="prism-code language-yaml codeBlock__7R1 thin-scrollbar"><code class="codeBlockLines_QPnn"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">"dev"</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"lerna --scope=@logto/{core,phrases,schemas,ui} exec -- pnpm dev"</span><br></span></code></pre><div class="buttonGroup_I80O"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_sN_3" aria-hidden="true"><svg class="copyButtonIcon_BIKD" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_NZqA" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_KgUL" id="summary">Summary<a href="#summary" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>Ideally, only two steps for a new engineer/contributor to get started:</p><ol><li>Clone the repo</li><li><code>pnpm i &amp;&amp; pnpm dev</code></li></ol><h2 class="anchor anchorWithStickyNavbar_KgUL" id="closing-notes">Closing notes<a href="#closing-notes" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>Our team has been developing under this approach for one year, and we are pretty happy with it. Visit our <a href="https://github.com/logto-io/logto" target="_blank" rel="noopener noreferrer">GitHub repo</a> to see the latest shape of the project. To wrap up:</p><p><strong>Pains</strong></p><ul><li>Need to be familiar with the JS/TS ecosystem</li><li>Need to choose the right package manager</li><li>Require some additional one-time setup</li></ul><p><strong>Gains</strong></p><ul><li>Develop and maintain the whole project in one repo</li><li>Simplified coding skill requirements</li><li>Shared code styles, schemas, phrases, and utilities</li><li>Improved communication efficiency<ul><li>No more questions like: What’s the API definition?</li><li>All engineers are talking in the same programming language</li></ul></li><li>CI/CD with ease<ul><li>Use the same toolchain for building, testing, and publishing</li></ul></li></ul><p>This article remains several topics uncovered: Setting up the repo from scratch, adding a new package, leveraging GitHub Actions for CI/CD, etc. It’ll be too long for this article if I expand each of them. Feel free to comment and let me know which topic you’d like to see in the future.</p>]]></content:encoded>
            <category>typescript</category>
            <category>monorepo</category>
        </item>
    </channel>
</rss>